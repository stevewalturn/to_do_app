{
  "package_name": "com.digital_product.to_do_app",
  "project_description": "A comprehensive Flutter to-do application using Stacked architecture, providing robust task management functionality. The app allows users to create, edit, toggle, and delete todo items with a clean, intuitive interface. Key features include startup screen navigation, home screen with todo list management, custom dialogs for adding/editing todos, and bottom sheets for todo item actions. The application supports full CRUD operations for todo items and maintains a reactive, responsive user experience.",
  "architecture_overview": "The application leverages the Stacked architecture with MVVM design pattern, utilizing dependency injection through GetIt, reactive state management, and centralized service management. Core components include view models for each screen, a dedicated todo service for data management, custom dialogs and bottom sheets, and a modular routing system. The architecture emphasizes separation of concerns, with clear distinctions between UI, business logic, and data management layers.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/add_todo/add_todo_dialog_model.dart",
      "description": "A view model for managing the state and validation logic of adding or editing todo items in a dialog interface, providing form validation and dynamic title generation",
      "class_diagram": "@startuml\nclass AddTodoDialogModel {\n  - _logger: Logger\n  + existingTodo: TodoItem\n  + dialogTitle: String\n  + validateTitle(value: String): String\n  + validateDescription(value: String): String\n}\n@enduml",
      "methods": [
        {
          "name": "validateTitle",
          "description": "Validates the todo item title with rules for non-emptiness and maximum length",
          "parameters": [
            "value"
          ],
          "return_type": "String?"
        },
        {
          "name": "validateDescription",
          "description": "Validates the todo item description with a maximum length constraint",
          "parameters": [
            "value"
          ],
          "return_type": "String?"
        }
      ],
      "dependencies": [
        "package:logger/logger.dart",
        "package:stacked/stacked.dart",
        "package:to_do_app/models/todo_item.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "Application entry point responsible for initializing and launching the Flutter to-do application with robust error handling and core system configuration",
      "class_diagram": "@startuml\nclass MainEntryPoint {\n  + void main()\n  - void runZonedGuarded()\n}\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "Primary application initialization method that sets up system configurations, dependency injection, and launches the app",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "dart:async",
        "flutter/material.dart",
        "flutter/services.dart",
        "to_do_app/app/app.bottomsheets.dart",
        "to_do_app/app/app.dialogs.dart",
        "to_do_app/app/app.locator.dart",
        "features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/todo_options/todo_options_sheet.dart",
      "description": "A bottom sheet component for managing Todo item actions, providing a user interface for toggling completion status, editing, and deleting todo items with a clean and intuitive design",
      "class_diagram": "@startuml\nclass TodoOptionsSheet {\n  +completer: Function(SheetResponse)\n  +request: SheetRequest\n  +builder(context, viewModel, child): Widget\n  +viewModelBuilder(context): TodoOptionsSheetModel\n}\nclass _OptionTile {\n  +icon: IconData\n  +title: String\n  +onTap: VoidCallback\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the bottom sheet UI with options for todo item actions",
          "parameters": [
            "BuildContext",
            "TodoOptionsSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model for the todo options bottom sheet",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "TodoOptionsSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "models/todo_item.dart",
        "ui/bottom_sheets/todo_options/todo_options_sheet_model.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "Base application view model serving as a foundational component for managing core application state and lifecycle using the MVVM architectural pattern with Stacked framework",
      "class_diagram": "@startuml\nclass AppViewModel {\n}\nBaseViewModel <|-- AppViewModel\n@enduml",
      "methods": [
        {
          "name": "constructor",
          "description": "Creates an instance of the application's core view model, inheriting reactive state management capabilities",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "A view model for the home screen that manages counter state, handles UI interactions, and provides dialog/bottom sheet services for a simple counter application",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _counter: int\n  + incrementCounter()\n  + showDialog()\n  + showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increases the counter value and triggers UI rebuild",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with information about the current counter value",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet with a notice",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "app/app.bottomsheets.dart",
        "app/app.dialogs.dart",
        "app/app.locator.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Application root view responsible for configuring the global app structure, managing navigation, and implementing core UI behaviors like text scaling and keyboard dismissal",
      "class_diagram": "@startuml\nclass AppView {\n  +build(BuildContext context): Widget\n}\nclass _App {\n  +build(BuildContext context, AppViewModel viewModel): MaterialApp\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Creates the root MaterialApp with initial routing configuration and global UI behaviors",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "to_do_app/app/app.router.dart",
        "to_do_app/features/app/app_viewmodel.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "A startup view model responsible for managing the initial application navigation and performing startup logic before the main app interface loads",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  -_navigationService: NavigationService\n  +runStartupLogic(): Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes initial startup tasks, including a brief delay and navigating to the home view",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "app.locator.dart",
        "app.router.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "A startup screen view responsible for displaying an initial loading screen and triggering the application's initialization logic when the app first launches",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel)\n  +viewModelBuilder(BuildContext)\n  +onViewModelReady(StartupViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the visual UI for the startup loading screen",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and initializes the StartupViewModel for the view",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers the initial startup logic after the view is fully rendered",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "stacked/stacked.dart",
        "startup_viewmodel.dart"
      ]
    },
    {
      "name": "lib/services/todo_service.dart",
      "description": "A core service for managing todo items in a Flutter application, providing full CRUD operations for a task management system with robust error handling and logging",
      "class_diagram": "@startuml\nclass TodoService {\n  -_logger: Logger\n  -_todos: List<TodoItem>\n  +todos: List<TodoItem>\n  +addTodo(title: String, description: String)\n  +toggleTodoCompletion(todoId: String)\n  +deleteTodo(todoId: String)\n  +editTodo(todoId: String, newTitle: String, newDescription: String)\n}\n@enduml",
      "methods": [
        {
          "name": "addTodo",
          "description": "Creates a new todo item with a unique ID, title, description, and creation timestamp",
          "parameters": [
            "title",
            "description"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoCompletion",
          "description": "Switches the completion status of a specific todo item, marking its completion timestamp",
          "parameters": [
            "todoId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a specific todo item from the list by its unique identifier",
          "parameters": [
            "todoId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "editTodo",
          "description": "Updates the title and description of an existing todo item",
          "parameters": [
            "todoId",
            "newTitle",
            "newDescription"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "logger/logger.dart",
        "stacked/stacked.dart",
        "models/todo_item.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/todo_options/todo_options_sheet_model.dart",
      "description": "A ViewModel for managing todo item options in a bottom sheet, providing read-only access to todo item state and leveraging Stacked architecture for reactive UI updates",
      "class_diagram": "@startuml\nclass TodoOptionsSheetModel {\n  - TodoItem todo\n  + bool isCompleted\n  + String title\n}\n@enduml",
      "methods": [
        {
          "name": "TodoOptionsSheetModel",
          "description": "Constructor that initializes the model with a specific todo item",
          "parameters": [
            "todo: TodoItem"
          ],
          "return_type": null
        },
        {
          "name": "isCompleted",
          "description": "Getter that returns the completion status of the todo item",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "title",
          "description": "Getter that returns the title of the todo item",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart",
        "to_do_app/models/todo_item.dart"
      ]
    },
    {
      "name": "lib/models/todo_item.dart",
      "description": "A data model representing a Todo task in a task management application, defining the structure and behavior of individual todo items with comprehensive serialization and immutability support",
      "class_diagram": "@startuml\nclass TodoItem {\n  +id: String\n  +title: String\n  +description: String\n  +isCompleted: bool\n  +createdAt: DateTime\n  +completedAt: DateTime?\n  +copyWith()\n  +toJson()\n  +fromJson()\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new TodoItem instance with optional field updates, enabling immutable state modifications",
          "parameters": [
            "id?",
            "title?",
            "description?",
            "isCompleted?",
            "createdAt?",
            "completedAt?"
          ],
          "return_type": "TodoItem"
        },
        {
          "name": "toJson",
          "description": "Converts TodoItem instance to a JSON-compatible map for storage or transmission",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a TodoItem instance from a JSON map, supporting deserialization",
          "parameters": [
            "json"
          ],
          "return_type": "TodoItem"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/add_todo/add_todo_dialog.dart",
      "description": "A Flutter dialog component for creating and editing Todo items, providing a user interface for adding or updating task details with form validation and state management",
      "class_diagram": "@startuml\nclass AddTodoDialog {\n  + DialogRequest request\n  + Function(DialogResponse) completer\n  + Widget builder()\n  + AddTodoDialogModel viewModelBuilder()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the dialog UI with title, description input fields, and action buttons for adding/updating a todo",
          "parameters": [
            "BuildContext",
            "AddTodoDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model for the dialog, handling dialog state and validation logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "AddTodoDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "to_do_app/models/todo_item.dart",
        "to_do_app/ui/common/app_colors.dart",
        "to_do_app/ui/dialogs/add_todo/add_todo_dialog_model.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/todo_item_card.dart",
      "description": "A reusable UI widget for displaying individual todo items with visual state representation, supporting interaction and completion tracking",
      "class_diagram": "@startuml\nclass TodoItemCard {\n  -TodoItem todo\n  -VoidCallback onTap\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders a card representation of a todo item with dynamic styling based on completion status",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:to_do_app/models/todo_item.dart",
        "package:to_do_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "A Flutter view representing the home screen, demonstrating a basic counter application with interactive UI elements and navigation patterns using the Stacked architecture",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel)\n  +viewModelBuilder(BuildContext)\n}\nnote right: Implements home screen UI\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the home screen UI with a counter, buttons for interaction, and dialog/bottom sheet triggers",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the associated ViewModel for managing home screen state and logic",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "stacked/stacked.dart",
        "home_viewmodel.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant StartupView\nparticipant HomeView\nparticipant TodoService\nparticipant DialogService\nparticipant BottomSheetService\n\nUser -> StartupView: App Launch\nStartupView -> HomeView: Navigate\nUser -> HomeView: View Todo List\nUser -> HomeView: Add Todo\nHomeView -> DialogService: Open Add Todo Dialog\nUser -> DialogService: Enter Todo Details\nDialogService -> TodoService: Create Todo Item\nTodoService --> HomeView: Update Todo List\nUser -> HomeView: Show Todo Options\nHomeView -> BottomSheetService: Open Todo Options\nUser -> BottomSheetService: Select Action\nBottomSheetService -> TodoService: Perform Action\nTodoService --> HomeView: Update Todo List\n@enduml",
  "state_management_flow": "The application uses Stacked's reactive state management approach with ViewModels as the primary state containers. Each view (StartupView, HomeView) has a corresponding ViewModel that manages its state and logic. The TodoService acts as a centralized state management mechanism for todo items, with methods to add, edit, delete, and toggle todo item states. State changes trigger automatic UI updates through the reactive programming model, ensuring real-time synchronization between data and presentation.",
  "navigation_flow": "Navigation is managed through Stacked's routing system, defined in app.router.dart. The typical flow starts with the StartupView, which performs initial setup and then navigates to the HomeView. The HomeView serves as the primary interface, allowing navigation to dialogs (AddTodoDialog) and bottom sheets (TodoOptionsSheet) through the NavigationService. Each navigation action is handled by the corresponding ViewModel, which coordinates with the NavigationService to manage screen transitions and maintain a clean, decoupled navigation architecture."
}